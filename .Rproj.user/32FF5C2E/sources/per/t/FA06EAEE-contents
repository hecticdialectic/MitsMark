---
title: "Mits Mark Ideophone Project - Data Analysis"
output: html_document
---

```{r Loading packages, include = FALSE}

library(lme4)
library(plyr)
library(ggplot2)
library(afex)
library(emmeans)
library(ggthemes)
library(tidyverse)
library(kableExtra)
library(Hmisc)
library(binom)
library(Rmisc)
library(magick)
library(webshot)
library(magrittr)
library(multcomp)
library(data.table)

```


```{r Reading in my GGThemese, include = FALSE}
theme_alan <- function(base_size = 12 , base_family = "")
{
  half_line <- base_size/2
  colors <- ggthemes_data$few
  gray <- colors$medium["gray"]
  black <- colors$dark["black"]
  
  theme(
    line = element_line(colour = "black", size = 0.5, linetype = 1, lineend = "butt"),
    rect = element_rect(fill = "white", 
                        colour = "black", size = 0.5, linetype = 1),
    text = element_text(family = base_family, face = "plain", colour = "black", 
                        size = base_size, lineheight = 0.9, hjust = 0.5, vjust = 0.5,
                        angle = 0, margin = margin(), debug = FALSE),
    
    axis.line = element_blank(),
    axis.line.x = NULL,
    axis.line.y = NULL, 
    axis.text = element_text(size = rel(0.8), colour = "grey30"),
    axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
    axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
    axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
    axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0), 
    axis.ticks = element_line(colour = "grey20"), 
    axis.ticks.length = unit(half_line/2, "pt"),
    axis.title.x = element_text(margin = margin(t = half_line), vjust = 1),
    axis.title.x.top = element_text(margin = margin(b = half_line), vjust = 0),
    axis.title.y = element_text(angle = 90, margin = margin(r = half_line), vjust = 1),
    axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line), vjust = 0),
    
    legend.background = element_rect(colour = NA),
    legend.spacing = unit(0.4, "cm"), 
    legend.spacing.x = NULL, 
    legend.spacing.y = NULL,
    legend.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
    legend.key = element_rect(fill = "white", colour = NA), 
    legend.key.size = unit(1.2, "lines"), 
    legend.key.height = NULL,
    legend.key.width = NULL,
    legend.text = element_text(size = rel(0.8)), 
    legend.text.align = NULL,
    legend.title = element_text(hjust = 0),
    legend.title.align = NULL,
    legend.position = "right", 
    legend.direction = NULL,
    legend.justification = "center", 
    legend.box = NULL,
    legend.box.margin = margin(0, 0, 0, 0, "cm"),
    legend.box.background = element_blank(),
    legend.box.spacing = unit(0.4, "cm"),
    
    panel.background = element_rect(fill = "white", colour = NA),
    panel.border = element_rect(fill = NA, colour = "grey20"),
    panel.grid.major = element_line(colour = "grey92"),
    panel.grid.minor = element_line(colour = "grey92", size = 0.25),
    panel.spacing = unit(half_line, "pt"),
    panel.spacing.x = NULL,
    panel.spacing.y = NULL,
    panel.ontop = FALSE,
    
    strip.background = element_rect(fill = "NA", colour = "NA"),
    strip.text = element_text(colour = "grey10", size = rel(0.8)),
    strip.text.x = element_text(margin = margin(t = half_line, b = half_line)),
    strip.text.y = element_text(angle = 0, margin = margin(l = half_line, r = half_line)),
    strip.placement = "inside",
    strip.placement.x = NULL, 
    strip.placement.y = NULL,
    strip.switch.pad.grid = unit(0.1, "cm"), 
    strip.switch.pad.wrap = unit(0.1, "cm"), 
    
    plot.background = element_rect(colour = "white"),
    plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line * 1.2)),
    plot.subtitle = element_text(size = rel(0.9), hjust = 0, vjust = 1, margin = margin(b = half_line * 0.9)),
    plot.caption = element_text(size = rel(0.9), hjust = 1, vjust = 1, margin = margin(t = half_line * 0.9)), 
    plot.margin = margin(half_line, half_line, half_line, half_line),
    
    complete = TRUE)
}


```


```{r Reading in Data}
files  <- list.files(path = "C:/Users/Alank/Documents/GitHub/MitsMark/Data/AllData", pattern = '.csv',full.names= TRUE)  

tables <- lapply(files, read.csv, header = TRUE, sep = ',')
allRaw <- do.call(rbind , tables) 
testcheck1 <- subset(allRaw, trial_index == 6|trial_index==12) #attention check instruction trials where the correct answer is "same"
unique(testcheck1$answer) #should return only "same"

testcheck2 <- subset(allRaw, trial_index == 8|trial_index==13) #attention check instruction trials where the correct answer is "different"
unique(testcheck2$answer) #should return only "different"


#Fortunately we can subset these really easily out by their trial_indexes
allTraining <- subset(allRaw, trial_index >= 15 & trial_index <63)

allTesting <- subset(allRaw, trial_index >= 64 & trial_index <=111)

#Now we can get rid of a bunch of columns
allTesting$ParticipantID <- rep(1:(nrow(allTesting)/48), each = 48)
allTesting$ParticipantID <- paste("x", allTesting$ParticipantID, sep = '')

allTesting <- subset(allTesting, select = c("ParticipantID", 'trialNum', 'TrialType', 'word', "sound", 'WordType',
                                                'TrueMeaning', 'TargetMeaning', 'answer', 'correct', 'rt'))


colnames(allTesting) <- c("ParticipantID", "TrialNum", "TrialType", "English", "Japanese", "WordType", "TrueMeaning",
                            "TargetMeaning", "Answer", "Correct", "RT")


```


```{r Preliminary Look}

tapply(allTesting$Correct, allTesting$WordType, mean)

allTestingAgg <- aggregate(Correct ~ WordType ,
                  data= allTesting, 
                  mean)

allTestingAggSD <- aggregate(Correct ~ WordType ,
                  data= allTesting, 
                  sd)

allTestingAgg$SE <- allTestingAggSD$Correct/sqrt(432)

library(ggplot2)
library(ggthemes)


ggplot(data=allTestingAgg, aes(x=WordType, y=Correct), group = 6) +
  geom_bar(stat = "summary", fun.y = "mean") +
  geom_errorbar(aes(ymin= Correct - SE, ymax= Correct + SE, width = 0.2)) +
  labs(x="Word Type", y="Proportion Correct") +
  guides(colour=FALSE) +
  scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.00), limits = c(0,1)) +
  theme_alan()


```



```{r Targets vs Distractors}

allTestingAgg2 <- aggregate(Correct ~ WordType + TrialType,
                  data= allTesting, 
                  mean)

allTestingAggSD2 <- aggregate(Correct ~ WordType + TrialType ,
                  data= allTesting, 
                  sd)

allTestingAgg2$SE <- allTestingAgg$Correct/sqrt(216)

library(ggplot2)
library(ggthemes)


ggplot(data=allTestingAgg2, aes(x=WordType, y=Correct), group = 6) +
  geom_bar(stat = "summary", fun.y = "mean", aes(fill = TrialType), position = position_dodge(width=0.9)) +
  #geom_errorbar(aes(ymin= Correct - SE, ymax= Correct + SE, width = 0.2)) +
  labs(x="Word Type", y="Proportion Correct") +
  scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.00), limits = c(0,1)) +
  theme_tufte()

```





```{r Effect of Word Type Stats}
afex1 <- mixed(Correct ~ WordType + (1|ParticipantID),
                         data=allTesting,
                         family=binomial,
                         control=glmerControl(optimizer="bobyqa"),
                         method = 'LRT',
                         progress=FALSE)

##ANOVA Table for P Values of Main effects and Interactions
afex1$anova_table %>% 
  data.frame() %>% 
    tibble::rownames_to_column(var= "Variable") %>% 
      mutate_if(is.numeric, round, digits = 3) %>% 
        mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
          `colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
            knitr::kable(caption = "Word Type Comparison", ) %>%
              kable_styling(full_width= F)


##Fixed Effects 
summary(afex1)$coefficients  %>%
  data.frame() %>%
    tibble::rownames_to_column(var= "FixedEffect") %>% 
    mutate(FixedEffect = recode_factor(FixedEffect, 
                                       `WordTypeNRI` = "Non-Reduplicative Ideophones",
                                       `WordTypeRI` = "Reduplicative Ideophones",
                                       `WordTypeRNAdj` = "Reduplicated Normal Adjectives",
                                       `WordTypeRNRI` = "Reduplicated Non-Reduplicative Ideophones",
                                       `WordTypeSRI` = "Split Reduplicative Ideophones")) %>%
      `colnames<-`(c("Fixed Effect", "Estimate", "SE", "z", "p")) %>%
        mutate_if(is.numeric, round, digits = 3) %>% 
          mutate_at("p", funs(ifelse(.<0.001, "<0.001", .))) %>%
            knitr::kable(caption = "Word Type Comparison- Fixed Effects Table", ) %>%
              kable_styling(full_width= F) %>%
                pack_rows("Intercept", 1, 1) %>%
                  pack_rows("Word Types", 2, 6) 


#### DESCRIPTIVES AND POST HOC TESTS
#Word Types
##Word Types Descriptives
alldata.WordType <- summarySE(data=allTesting,
                             measurevar = "Correct",
                             groupvars = "WordType")

alldata.WordType.EM <- emmeans(afex1, ~WordType)

##Condition vs. Chance
Exp1.Condition.vchance <- test(Exp1.Condition.EM, adjust = "none")

##Condition vs. Each Other
Exp1.Condition.vPairs <- data.frame(pairs(Exp1.Condition.EM, adjust = "none" ))

###Iconic Baseline
Exp1.Condition.vPairs.IB <- 
  rbind(rep(NA,6),Exp1.Condition.vPairs[1:3,])
#Conventional Baseline
Exp1.Condition.vPairs.CB <- 
  rbind(Exp1.Condition.vPairs[1,], rep(NA,6),Exp1.Condition.vPairs[4:5,])
#Mixed Baseline
Exp1.Condition.vPairs.MB <- 
  rbind(Exp1.Condition.vPairs[2,], Exp1.Condition.vPairs[4,], rep(NA,6),Exp1.Condition.vPairs[6,])
#Counter-Iconic Baseline
Exp1.Condition.vPairs.CIB <- 
  rbind(Exp1.Condition.vPairs[3,],Exp1.Condition.vPairs[5,],Exp1.Condition.vPairs[6,], rep(NA,6))

###Creating a single dataframe for Blocks
Exp1.Condition.Combo <- cbind.data.frame (
  Exp1.Condition$Condition, Exp1.Condition$N, Exp1.Condition$RespCorr, Exp1.Condition$se,
  Exp1.Condition.vchance$z.ratio,Exp1.Condition.vchance$p.value,
  Exp1.Condition.vPairs.IB$z.ratio, Exp1.Condition.vPairs.IB$p.value,
  Exp1.Condition.vPairs.CB$z.ratio, Exp1.Condition.vPairs.CB$p.value,
  Exp1.Condition.vPairs.MB$z.ratio, Exp1.Condition.vPairs.MB$p.value,
  Exp1.Condition.vPairs.CIB$z.ratio, Exp1.Condition.vPairs.CIB$p.value
)

colnames(Exp1.Condition.Combo) <- c("Level", "n", "Mean", "SE", 
                                "z v chance", "p v chance",
                                "z v I", "p v I",
                                "z v C", "p v C",
                                "z v M", "p v M",
                                "z v CI", "p v CI"
                                )

rm(Exp1.Condition.vPairs.IB, Exp1.Condition.vPairs.CB, Exp1.Condition.vPairs.MB, Exp1.Condition.vPairs.CIB)

###Knitting Condition Table
Exp1.Condition.Combo %>%  
  mutate_if(is.numeric, round, 3) %>%
    mutate_at(.vars = vars("z v chance", "z v I", "z v C", "z v M", "z v CI"), round, 2)%>%
    mutate_at(.vars = vars("p v chance", "p v I", "p v C", "p v M", "p v CI"),
        funs(ifelse(.<0.001, "<0.001", .))) %>%
          knitr::kable(caption = 'Experiment 1 - Descriptive Statistics - Condition', "html") %>%
            kable_styling(full_width = F) %>%
              add_header_above(c("", "Descriptive Stats" = 3, "Comparison to Chance" = 2, 
                     "Comparison to Iconic" = 2,
                     "Comparison to Conventional" = 2,
                     "Comparison to Mixed" = 2,
                     "Comparison to Counter-Iconic" = 2),
                   font_size = 12)



```


```{r Effect of Word Type Stats - Split into Factors}

allTesting$Ideo <- mapvalues(allTesting$WordType,
                               from = c("RI", "SRI", "NRI", "RNRI", "NAdj", "RNAdj"),
                               to = c("Y", "Y", "Y", "Y", "N", "N"))


allTesting$Redup <- mapvalues(allTesting$WordType,
                               from = c("RI", "SRI", "NRI", "RNRI", "NAdj", "RNAdj"),
                               to = c("Y", "N", "N", "Y", "N", "Y"))

allTesting$Nat <- mapvalues(allTesting$WordType,
                               from = c("RI", "SRI", "NRI", "RNRI", "NAdj", "RNAdj"),
                               to = c("Y", "N", "Y", "N", "Y", "N"))




afex2 <- mixed(correct ~ Ideo + Redup + Nat + (1|Id),
                         data=allTesting,
                         family=binomial,
                         control=glmerControl(optimizer="bobyqa"),
                         method = 'LRT',
                         progress=FALSE,
                         all_fit= TRUE)

##ANOVA Table for P Values of Main effects and Interactions
afex2$anova_table %>% 
  data.frame() %>% 
    tibble::rownames_to_column(var= "Variable") %>% 
      mutate_if(is.numeric, round, digits = 3) %>% 
        mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
          `colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
            knitr::kable(caption = "Word Type Comparison", ) %>%
              kable_styling(full_width= F)


##Fixed Effects 
summary(afex2)$coefficients  %>%
  data.frame() %>%
    tibble::rownames_to_column(var= "FixedEffect") %>% 
    mutate(FixedEffect = recode_factor(FixedEffect, 
                                       `IdeoY` = "Ideophones",
                                       `RedupY` = "Reduplication",
                                       `NatN` = "Naturalness")) %>%
      `colnames<-`(c("Fixed Effect", "Estimate", "SE", "z", "p")) %>%
        mutate_if(is.numeric, round, digits = 3) %>% 
          mutate_at("p", funs(ifelse(.<0.001, "<0.001", .))) %>%
            knitr::kable(caption = "Word Type Comparison- Fixed Effects Table", ) %>%
              kable_styling(full_width= F) %>%
                pack_rows("Intercept", 1, 1) %>%
                  pack_rows("Fixed Effects", 2, 4) 

```








