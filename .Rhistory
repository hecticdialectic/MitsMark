RI$WordType <- "RI"      # add a wordtype column to all of them showing their wordtype
SRI$WordType <- "SRI"
NRI$WordType <- "NRI"
RNRI$WordType <- "RNRI"
NAdj$WordType <- "NAdj"
RNAdj$WordType <- "RNAdj"
SelectedStims <- RI[sample(nrow(RI)),]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),10], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
View(Training)
SelectedStims <- RI[sample(nrow(NRI)),]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),10], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
View(Training)
SelectedStims <- NRI[sample(nrow(NRI)),]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),10], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
SelectedStims <- RI[sample(nrow(RI)),]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),10], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(RI, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing_FullBetween_RI <- rbind(TestingCorrect, TestingIncorrect)
Testing_FullBetween_RI <- subset(Testing_FullBetween_RI, select = c(Word, Engl, Dutch, WordType, Correct))
Testing_FullBetween_RI <- Testing_FullBetween_RI[sample(nrow(Testing_FullBetween_RI)),]
write.csv(Testing_FullBetween_RI, "Testing_LimBetween.csv")
SelectedStims <- RI[sample(nrow(RI)), 10]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(RI, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing_FullBetween_RI <- rbind(TestingCorrect, TestingIncorrect)
Testing_FullBetween_RI <- subset(Testing_FullBetween_RI, select = c(Word, Engl, Dutch, WordType, Correct))
Testing_FullBetween_RI <- Testing_FullBetween_RI[sample(nrow(Testing_FullBetween_RI)),]
write.csv(Testing_FullBetween_RI, "Testing_LimBetween.csv")
### Read in the files
RI <- read.csv("RedupIdeo.csv") # Read in the Reduplicative ideophones file as a dataframe
names(RI)[names(RI) == 'Japanese'] <- 'Word'
SRI <- RI
SRI %<>%     # Split the strings in the word column in half- so kashikashi becomes kashi (the split version of the reduplicative ideophone)
mutate(Word = str_sub(Word, start=nchar(as.character(Word))/2 + 1))
NRI <- read.csv("NonRedupIdeo.csv")
names(NRI)[names(NRI) == 'Japanese'] <- 'Word'
RNRI <- NRI # Copy to a new dataframe to be modified for Reduplicated Non-reduplicative ideophones
RNRI$Word2 <- RNRI$Word
RNRI <- unite(RNRI, Word, Word, Word2, sep = "", remove = TRUE) # Reduplicate the word
NAdj <- read.csv("NormAdjs.csv")              # Read in normal adjectives
names(NAdj)[names(NAdj) == 'Japanese'] <- 'Word'
RNAdj <- NAdj # Copy to a new dataframe to be modified for Reduplicated Normal Adjectives
RNAdj$Word2 <- RNAdj$Word
RNAdj <- unite(RNAdj, Word, Word, Word2, sep = '', remove= TRUE)
RI$WordType <- "RI"      # add a wordtype column to all of them showing their wordtype
SRI$WordType <- "SRI"
NRI$WordType <- "NRI"
RNRI$WordType <- "RNRI"
NAdj$WordType <- "NAdj"
RNAdj$WordType <- "RNAdj"
SelectedStims <- RI[sample(nrow(RI)), 10]
SelectedStims <- RI[sample(nrow(RI)), ]
SelectedStims <- RI[sample(nrow(RI),10), ]
SelectedStims <- RI[sample(nrow(RI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(RI, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing_FullBetween_RI <- rbind(TestingCorrect, TestingIncorrect)
Testing_FullBetween_RI <- subset(Testing_FullBetween_RI, select = c(Word, Engl, Dutch, WordType, Correct))
Testing_FullBetween_RI <- Testing_FullBetween_RI[sample(nrow(Testing_FullBetween_RI)),]
write.csv(Testing_FullBetween_RI, "Testing_LimBetween.csv")
SelectedStims <- RI[sample(nrow(RI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
RI <- read.csv("RedupIdeo.csv") # Read in the Reduplicative ideophones file as a dataframe
names(RI)[names(RI) == 'Japanese'] <- 'Word'
SRI <- RI
SRI %<>%     # Split the strings in the word column in half- so kashikashi becomes kashi (the split version of the reduplicative ideophone)
mutate(Word = str_sub(Word, start=nchar(as.character(Word))/2 + 1))
NRI <- read.csv("NonRedupIdeo.csv")
names(NRI)[names(NRI) == 'Japanese'] <- 'Word'
RNRI <- NRI # Copy to a new dataframe to be modified for Reduplicated Non-reduplicative ideophones
RNRI$Word2 <- RNRI$Word
RNRI <- unite(RNRI, Word, Word, Word2, sep = "", remove = TRUE) # Reduplicate the word
NAdj <- read.csv("NormAdjs.csv")              # Read in normal adjectives
names(NAdj)[names(NAdj) == 'Japanese'] <- 'Word'
RNAdj <- NAdj # Copy to a new dataframe to be modified for Reduplicated Normal Adjectives
RNAdj$Word2 <- RNAdj$Word
RNAdj <- unite(RNAdj, Word, Word, Word2, sep = '', remove= TRUE)
RI$WordType <- "RI"      # add a wordtype column to all of them showing their wordtype
SRI$WordType <- "SRI"
NRI$WordType <- "NRI"
RNRI$WordType <- "RNRI"
NAdj$WordType <- "NAdj"
RNAdj$WordType <- "RNAdj"
SelectedStims <- RI[sample(nrow(RI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
View(Training)
View(Testing)
View(Testing)
SelectedStims <- SRI[sample(nrow(SRI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween_.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
SelectedStims <- NRI[sample(nrow(NRI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween_.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
SelectedStims <- RNRI[sample(nrow(RNRI),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween_.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
SelectedStims <- NAdj[sample(nrow(NAdj),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween_.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
SelectedStims <- RNAdj[sample(nrow(RNAdj),10), ]
Training <- rbind(SelectedStims[sample(nrow(SelectedStims)),], SelectedStims[sample(nrow(SelectedStims)),])
Training <- subset(Training, select = c(Word, Engl, Dutch, WordType))
write.csv(Training, "Training_LimBetween_.csv")
TestingCorrect <- SelectedStims[sample(nrow(SelectedStims)),]
TestingCorrect$Correct <- "Y"
TestingIncorrect <- transform(SelectedStims, Word = sample(Word))
TestingIncorrect$Correct <- "N"
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing<- subset(Testing, select = c(Word, Engl, Dutch, WordType, Correct))
Testing <- Testing[sample(nrow(Testing)),]
write.csv(Testing, "Testing_LimBetween_.csv")
require(reshape2)
require(plyr)
require(magrittr)
require(lme4)
require(dplyr)
require(tidyr)
require(broom)
require(lattice)
require(doBy)
require(stringr)
RI <- read.csv("C:/Users/Alan/Documents/GitHub/MitsMark/Data/RedupIdeo.csv")
RI <- read.csv("C:/Users/Alan/Documents/GitHub/MitsMark/Data/RedupIdeo.csv")
library(reshape2)
library(plyr)
library(magrittr)
library(lme4)
library(dplyr)
library(tidyr)
library(broom)
library(lattice)
library(doBy)
install.packages("doBy")
library(reshape2)
library(plyr)
library(magrittr)
library(lme4)
library(dplyr)
library(tidyr)
library(broom)
library(lattice)
library(doBy)
library(stringr)
RI <- read.csv("C:/Users/Alan/Documents/GitHub/MitsMark/Data/RedupIdeo.csv")           # Read in the Reduplicative ideophones
NRI <- read.csv("C:/Users/Alan/Documents/GitHub/MitsMark/Data/NonRedupIdeo.csv")       # Read in the Non-Reduplicative ideophones
NAdj <- read.csv("C:/Users/Alan/Documents/GitHub/MitsMark/Data/NormAdjs.csv")          # Read in normal adjectives
View(RI)
RI <- RI[sample(nrow(RI)),]                         # Scrambles the order of the Reduplicated Ideophones
RISplit <- split(RI, rep(1:4, each= 6))
View(RISplit)
RISplit$1
RISplit
RI <- RI[sample(nrow(RI)),]                         # Scrambles the order of the Reduplicated Ideophones
RISplit <- split(RI, rep(1:4, each= 4))
RISplit
RI <- RI[sample(nrow(RI)),]                         # Scrambles the order of the Reduplicated Ideophones
RISplit <- split(RI, rep(1:5, each= 4))
RISplit
createsample <- function(seedval) {
set.seed(seedval)   # Setting the seed is used because we are yoking participants to each other- e.g. we might have 20 different samples and 25 participants using
# the same seed
RI <- RI[sample(nrow(RI)),]                         # Scrambles the order of the Reduplicated Ideophones
RISplit <- split(RI, rep(1:5, each= 4))             # Split the dataframe into two equal parts
RIWords <- RISplit$'1'                              # use half of the RI as RI
SRIWords <- RISplit$'2'                             # use half of the RI as SRI (split them below)
SRIWords %<>%  mutate(Japanese = str_sub(Japanese, start=nchar(as.character(Japanese))/2 + 1))  # Splits the ideophones
NRI <- NRI[sample(nrow(NRI)),]                       # Scrambles the order of the Non-Reduplicated Ideophones
NRISplit <- split(NRI, rep(1:5, each= 4))            # Split the dataframe into two equal parts
NRIWords <- NRISplit$'1'                                  # use half of the NRI as NRI
RNRIWords <- NRISplit$'2'                                 # use half of the NRI as RNRI (reduplicated below)
RNRIWords$Word2 <- RNRIWords$Japanese
RNRIWords <- unite(RNRIWords, Japanese, Japanese, Word2, sep = "", remove = TRUE)
NAdj <- NAdj[sample(nrow(NAdj)),]                    # Scrambles the order of the Normal Adjectives
NAdjSplit <- split(NAdj, rep(1:5, each= 4))         # Split the dataframe into two equal parts
NAdjWords <- NAdjSplit$'1'                                # use half of the NA as NA
RNAdjWords <- NAdjSplit$'2'                               # use half of the NA as RNA (reduplicated below)
RNAdjWords$Word2 <- RNAdjWords$Japanese
RNAdjWords <- unite(RNAdjWords, Japanese, Japanese, Word2, sep = "", remove = TRUE)
RIWords$WordType <- "RI"      # add a wordtype column to all of them showing their wordtype
SRIWords$WordType <- "SRI"
NRIWords$WordType <- "NRI"
RNRIWords$WordType <- "RNRI"
NAdjWords$WordType <- "NAdj"
RNAdjWords$WordType <- "RNAdj"
sampleX <- rbind(RIWords, SRIWords, NRIWords, RNRIWords, NAdjWords, RNAdjWords)
names(sampleX)[names(sampleX) == 'Japanese'] <- 'Word'                    # Change some names
names(sampleX)[names(sampleX) == 'Engl'] <- 'TrueMeaning'              # Change some names
sampleX <- subset(sampleX, select = c(Word, TrueMeaning, WordType))       # Select only the columns we need
return(sampleX)
}
createtraining <- function(sampleY) {
####################################################################
## Set up Training trials
rm(.Random.seed, envir=globalenv())           # this script resets the seed to something random
Training_FullWithin <- sampleY       # Stick all the sampled word types together into a list
TrainingFullWithin1 <- Training_FullWithin[sample(nrow(Training_FullWithin)),]                    # Scramble the list
TrainingFullWithin2 <- Training_FullWithin[sample(nrow(Training_FullWithin)),]                    # Scramble the list
Training <- rbind(TrainingFullWithin1, TrainingFullWithin2)                            # Stick the two lists together to make a training list (in training all words are seen twice in two blocks)
return(Training)
}
createtesting <- function(sampleY) {
## Set up Testing trials
rm(.Random.seed, envir=globalenv())           # this script resets the seed to something random
TestingCorrect <- sampleY                                                             # Stick the correct meanings into a list
TestingCorrect$TrialType <- "T"
TestingCorrect$TargetMeaning <- TestingCorrect$TrueMeaning
TestingCorrect$LegalTrial <- "Y"                                                      # notes that all target trials are legal trials
TestingIncorrect <- transform(sampleY, TargetMeaning = sample(TrueMeaning))           # Create a second list where meanings are randomly assigned
TestingIncorrect$TrialType <- "D"
TestingIncorrect$LegalTrial <- ifelse(TestingIncorrect$TargetMeaning == TestingIncorrect$TrueMeaning, "N", "Y")      # puts in a column that tells you if the trial is legal
Testing <- rbind(TestingCorrect, TestingIncorrect)
Testing <- Testing[sample(nrow(Testing)),]
TestCase <- length(unique(Testing$LegalTrial))  # checks what the values of the whole columns LegalTrial are - if they are all legal then this will just return 1,
# if not it will return 2
if(TestCase == 1) {
return(Testing)                       # if there are only legal trials, return Testing to the function
} else {
createtesting(sampleY)                # if there are illegal trials, then re-call the function
}
}
writestimuli <- function(seeds, perseed) {
# do n times, storing the current iteration number in 'i'
for (i in 1:seeds) {
seednum <- i
seedval <- sample(1:10000,1)
sampleY <- createsample(seedval)
for (j in 1:perseed) {
training <- createtraining(sampleY)
training <- cbind(Id=paste(seedval, j, sep="-"), training)
training$TrialNum <- 1:72
write.table(training, paste("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/training/",
seedval, "-", j, "-Training", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
testing <- createtesting(sampleY)
testing <- cbind(Id=paste(seedval, j, sep="-"), testing)
testing$TrialNum <- 1:72
write.table(testing, paste("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/"
,seedval, "-", j, "-Testing", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
}
}
}
SelectBalanced <- function(TargetSD, MaxTries, TryNum) {
writestimuli(25,20)
files  <- list.files(path = "F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv',
full.names= TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
AllTrials <- do.call(rbind , tables)
AllTrials$Word <- as.factor(AllTrials$Word)
WordCounts <- count(AllTrials, Word)
SD = sd(WordCounts$n)
if(TryNum < MaxTries){
if(SD < 4){
print("Complete")
} else {
do.call(file.remove, list(list.files("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/", full.names = TRUE)))
do.call(file.remove, list(list.files("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/training/", full.names = TRUE)))
print(SD)
TryNum <- TryNum + 1
return(TryNum)
SelectBalanced(0, 10, TryNum)
}
} else {
print("Failed to Reach TargetSD")
}
}
SelectBalanced2 <- function(MinNum, seeds, perseed) {
writestimuli(seeds,perseed)
files  <- list.files(path = "F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv', full.names =  TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
AllTrials <- do.call(rbind , tables)
AllTrials$Word <- as.factor(AllTrials$Word)
WordCounts <- count(AllTrials, Word)
MaxN <- max(WordCounts$n)
MinN <- min(WordCounts$n)
SD <- sd(WordCounts$n)
Diff = MaxN - MinN
if(MinN >= MinNum){
print(paste(MaxN, MinN, Diff, SD))
print("Complete")
}else {
do.call(file.remove, list(list.files("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/",
pattern = '\\-1-Testing.csv', full.names = TRUE)))
do.call(file.remove, list(list.files("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/training/",
pattern = '\\-1-Training.csv', full.names = TRUE)))
print(paste(MaxN, MinN, Diff, SD))
SelectBalanced2(MinNum, seeds, perseed)
}
}
SelectBalanced2(80, 50, 10)
createsample(49)
TestSet <- createsample(49)
createtraining(TestSet)
TestTraining <- createtraining(TestSet)
TestTesting <- createtesting(TestSet)
View(TestTesting)
writestimuli <- function(seeds, perseed) {
# do n times, storing the current iteration number in 'i'
for (i in 1:seeds) {
seednum <- i
seedval <- sample(1:10000,1)
sampleY <- createsample(seedval)
for (j in 1:perseed) {
training <- createtraining(sampleY)
training <- cbind(Id=paste(seedval, j, sep="-"), training)
training$TrialNum <- 1:48
write.table(training, paste("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/training/",
seedval, "-", j, "-Training", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
testing <- createtesting(sampleY)
testing <- cbind(Id=paste(seedval, j, sep="-"), testing)
testing$TrialNum <- 1:48
write.table(testing, paste("F:/Google Drive/Experiments/Collaborations/MitsMark/Stimuli/stimlists/testing/"
,seedval, "-", j, "-Testing", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
}
}
}
writestimuli <- function(seeds, perseed) {
# do n times, storing the current iteration number in 'i'
for (i in 1:seeds) {
seednum <- i
seedval <- sample(1:10000,1)
sampleY <- createsample(seedval)
for (j in 1:perseed) {
training <- createtraining(sampleY)
training <- cbind(Id=paste(seedval, j, sep="-"), training)
training$TrialNum <- 1:48
write.table(training, paste("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/training/",
seedval, "-", j, "-Training", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
testing <- createtesting(sampleY)
testing <- cbind(Id=paste(seedval, j, sep="-"), testing)
testing$TrialNum <- 1:48
write.table(testing, paste("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/"
,seedval, "-", j, "-Testing", ".csv", sep = ''),
sep = "\t", row.names = FALSE)
}
}
}
SelectBalanced <- function(TargetSD, MaxTries, TryNum) {
writestimuli(25,20)
files  <- list.files(path = "C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv',
full.names= TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
AllTrials <- do.call(rbind , tables)
AllTrials$Word <- as.factor(AllTrials$Word)
WordCounts <- count(AllTrials, Word)
SD = sd(WordCounts$n)
if(TryNum < MaxTries){
if(SD < 4){
print("Complete")
} else {
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", full.names = TRUE)))
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/training/", full.names = TRUE)))
print(SD)
TryNum <- TryNum + 1
return(TryNum)
SelectBalanced(0, 10, TryNum)
}
} else {
print("Failed to Reach TargetSD")
}
}
SelectBalanced2 <- function(MinNum, seeds, perseed) {
writestimuli(seeds,perseed)
files  <- list.files(path = "C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv', full.names =  TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
AllTrials <- do.call(rbind , tables)
AllTrials$Word <- as.factor(AllTrials$Word)
WordCounts <- count(AllTrials, Word)
MaxN <- max(WordCounts$n)
MinN <- min(WordCounts$n)
SD <- sd(WordCounts$n)
Diff = MaxN - MinN
if(MinN >= MinNum){
print(paste(MaxN, MinN, Diff, SD))
print("Complete")
}else {
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/",
pattern = '\\-1-Testing.csv', full.names = TRUE)))
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/training/",
pattern = '\\-1-Training.csv', full.names = TRUE)))
print(paste(MaxN, MinN, Diff, SD))
SelectBalanced2(MinNum, seeds, perseed)
}
}
SelectBalanced2(80, 50, 10)
SelectBalanced(4.5, 100, 1)
SelectBalanced2(40, 25, 20)
SelectBalanced2(8, 50, 10)
SelectBalanced2(8, 25, 20)
SelectBalanced2(20, 25, 20)
SelectBalanced2(40, 50, 10)
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/",
pattern = '\\-1-Testing.csv', full.names = TRUE)))
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/",
pattern = '\\-1-Testing.csv', full.names = TRUE)))
SelectBalanced2(40, 50, 10)
files  <- list.files(path = "C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv',
full.names =  TRUE)
files
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
tables
writestimuli(50,10)
files  <- list.files(path = "C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv', full.names =  TRUE)
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/",
pattern = '\\-1-Testing.csv', full.names = TRUE)))
SelectBalanced2 <- function(MinNum, seeds, perseed) {
writestimuli(seeds,perseed)
files  <- list.files(path = "C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", pattern = '\\-1-Testing.csv', full.names =  TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = '\t')
AllTrials <- do.call(rbind , tables)
AllTrials$Word <- as.factor(AllTrials$Word)
WordCounts <- count(AllTrials, Word)
MaxN <- max(WordCounts$n)
MinN <- min(WordCounts$n)
SD <- sd(WordCounts$n)
Diff = MaxN - MinN
if(MinN >= MinNum){
print(paste(MaxN, MinN, Diff, SD))
print("Complete")
}else {
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/testing/", full.names = TRUE)))
do.call(file.remove, list(list.files("C:/Users/Alan/Documents/GitHub/MitsMark/Stimuli/stimlists/training/", full.names = TRUE)))
print(paste(MaxN, MinN, Diff, SD))
SelectBalanced2(MinNum, seeds, perseed)
}
}
SelectBalanced2(60, 50, 10)
SelectBalanced2(16, 50, 10)
SelectBalanced2(12, 50, 10)
SelectBalanced2(12, 50, 10)
SelectBalanced2(12, 50, 10)
