gray <- colors$medium["gray"]
black <- colors$dark["black"]
theme(
line = element_line(colour = "black", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white",
colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black",
size = base_size, lineheight = 0.9, hjust = 0.5, vjust = 0.5,
angle = 0, margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "grey30"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "grey20"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.title.x = element_text(margin = margin(t = half_line), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(0.4, "cm"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
legend.key = element_rect(fill = "white", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(0.4, "cm"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major = element_line(colour = "grey92"),
panel.grid.minor = element_line(colour = "grey92", size = 0.25),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "NA", colour = "NA"),
strip.text = element_text(colour = "grey10", size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line, b = half_line)),
strip.text.y = element_text(angle = 0, margin = margin(l = half_line, r = half_line)),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line * 1.2)),
plot.subtitle = element_text(size = rel(0.9), hjust = 0, vjust = 1, margin = margin(b = half_line * 0.9)),
plot.caption = element_text(size = rel(0.9), hjust = 1, vjust = 1, margin = margin(t = half_line * 0.9)),
plot.margin = margin(half_line, half_line, half_line, half_line),
complete = TRUE)
}
###TRY TO WRITE ANOVA TABLE AND COEFFICIENT OUTPUTS AS FUNCTIONS HERE TO SAVE SPACE
#Read in the data
Exp1Data <- read.csv("C:/Users/Alan Nielsen/Google Drive/Publications/Motivated vs conventional systematicity/Data/5B Data CSV.csv")
#Read in the data
Exp1Data <- read.csv("C:/Users/Alank/Google Drive/Publications/Motivated vs conventional systematicity/Data/5B Data CSV.csv")
library(lme4)
library(plyr)
library(ggplot2)
library(afex)
library(emmeans)
library(ggthemes)
library(tidyverse)
library(kableExtra)
library(Hmisc)
library(binom)
library(Rmisc)
library(magick)
library(webshot)
library(magrittr)
library(multcomp)
library(data.table)
files  <- list.files(path = "C:/Users/Alank/Documents/GitHub/MitsMark/Data/AllData", pattern = '.csv',full.names= TRUE)
tables <- lapply(files, read.csv, header = TRUE, sep = ',')
allRaw <- do.call(rbind , tables)
testcheck1 <- subset(allRaw, trial_index == 6|trial_index==12) #attention check instruction trials where the correct answer is "same"
unique(testcheck1$answer) #should return only "same"
testcheck2 <- subset(allRaw, trial_index == 8|trial_index==13) #attention check instruction trials where the correct answer is "different"
unique(testcheck2$answer) #should return only "different"
#Fortunately we can subset these really easily out by their trial_indexes
allTraining <- subset(allRaw, trial_index >= 15 & trial_index <63)
allTesting <- subset(allRaw, trial_index >= 64 & trial_index <=111)
#Now we can get rid of a bunch of columns
allTesting$ParticipantID <- rep(1:(nrow(allTesting)/48), each = 48)
allTesting$ParticipantID <- paste("x", allTesting$ParticipantID, sep = '')
allTesting <- subset(allTesting, select = c("ParticipantID", 'trialNum', 'TrialType', 'word', "sound", 'WordType',
'TrueMeaning', 'TargetMeaning', 'answer', 'correct', 'rt'))
colnames(allTesting) <- c("ParticipantID", "TrialNum", "TrialType", "English", "Japanese", "WordType", "TrueMeaning",
"TargetMeaning", "Answer", "Correct", "RT")
tapply(allTesting$Correct, allTesting$WordType, mean)
allTestingAgg <- aggregate(Correct ~ WordType ,
data= allTesting,
mean)
allTestingAggSD <- aggregate(Correct ~ WordType ,
data= allTesting,
sd)
allTestingAgg$SE <- allTestingAggSD$Correct/sqrt(432)
library(ggplot2)
library(ggthemes)
ggplot(data=allTestingAgg, aes(x=WordType, y=Correct), group = 6) +
geom_bar(stat = "summary", fun.y = "mean") +
geom_errorbar(aes(ymin= Correct - SE, ymax= Correct + SE, width = 0.2)) +
labs(x="Word Type", y="Proportion Correct") +
guides(colour=FALSE) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.00), limits = c(0,1)) +
theme_tufte()
tapply(allTesting$Correct, allTesting$WordType, mean)
allTestingAgg <- aggregate(Correct ~ WordType ,
data= allTesting,
mean)
allTestingAggSD <- aggregate(Correct ~ WordType ,
data= allTesting,
sd)
allTestingAgg$SE <- allTestingAggSD$Correct/sqrt(432)
library(ggplot2)
library(ggthemes)
ggplot(data=allTestingAgg, aes(x=WordType, y=Correct), group = 6) +
geom_bar(stat = "summary", fun.y = "mean") +
geom_errorbar(aes(ymin= Correct - SE, ymax= Correct + SE, width = 0.2)) +
labs(x="Word Type", y="Proportion Correct") +
guides(colour=FALSE) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.00), limits = c(0,1)) +
theme_alan()
theme_alan <- function(base_size = 12 , base_family = "")
{
half_line <- base_size/2
colors <- ggthemes_data$few
gray <- colors$medium["gray"]
black <- colors$dark["black"]
theme(
line = element_line(colour = "black", size = 0.5, linetype = 1, lineend = "butt"),
rect = element_rect(fill = "white",
colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain", colour = "black",
size = base_size, lineheight = 0.9, hjust = 0.5, vjust = 0.5,
angle = 0, margin = margin(), debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "grey30"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "grey20"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.title.x = element_text(margin = margin(t = half_line), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(0.4, "cm"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(0.2, 0.2, 0.2, 0.2, "cm"),
legend.key = element_rect(fill = "white", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(0.4, "cm"),
panel.background = element_rect(fill = "white", colour = NA),
panel.border = element_rect(fill = NA, colour = "grey20"),
panel.grid.major = element_line(colour = "grey92"),
panel.grid.minor = element_line(colour = "grey92", size = 0.25),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "NA", colour = "NA"),
strip.text = element_text(colour = "grey10", size = rel(0.8)),
strip.text.x = element_text(margin = margin(t = half_line, b = half_line)),
strip.text.y = element_text(angle = 0, margin = margin(l = half_line, r = half_line)),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(0.1, "cm"),
strip.switch.pad.wrap = unit(0.1, "cm"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line * 1.2)),
plot.subtitle = element_text(size = rel(0.9), hjust = 0, vjust = 1, margin = margin(b = half_line * 0.9)),
plot.caption = element_text(size = rel(0.9), hjust = 1, vjust = 1, margin = margin(t = half_line * 0.9)),
plot.margin = margin(half_line, half_line, half_line, half_line),
complete = TRUE)
}
allTestingAgg2 <- aggregate(Correct ~ WordType + TrialType,
data= allTesting,
mean)
allTestingAggSD2 <- aggregate(Correct ~ WordType + TrialType ,
data= allTesting,
sd)
allTestingAgg2$SE <- allTestingAgg$Correct/sqrt(216)
library(ggplot2)
library(ggthemes)
ggplot(data=allTestingAgg2, aes(x=WordType, y=Correct), group = 6) +
geom_bar(stat = "summary", fun.y = "mean", aes(fill = TrialType), position = position_dodge(width=0.9)) +
#geom_errorbar(aes(ymin= Correct - SE, ymax= Correct + SE, width = 0.2)) +
labs(x="Word Type", y="Proportion Correct") +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1.00), limits = c(0,1)) +
theme_tufte()
afex1 <- mixed(correct ~ WordType + (1|Id),
data=allTesting,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE)
afex1 <- mixed(Correct ~ WordType + (1|Id),
data=allTesting,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE)
afex1 <- mixed(Correct ~ WordType + (1|ParticipantID),
data=allTesting,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE)
##ANOVA Table for P Values of Main effects and Interactions
afex1$anova_table %>%
data.frame() %>%
tibble::rownames_to_column(var= "Variable") %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
`colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
knitr::kable(caption = "Word Type Comparison", ) %>%
kable_styling(full_width= F)
##Fixed Effects
summary(afex1)$coefficients  %>%
data.frame() %>%
tibble::rownames_to_column(var= "FixedEffect") %>%
mutate(FixedEffect = recode_factor(FixedEffect,
`WordTypeNRI` = "Non-Reduplicative Ideophones",
`WordTypeRI` = "Reduplicative Ideophones",
`WordTypeRNAdj` = "Reduplicated Normal Adjectives",
`WordTypeRNRI` = "Reduplicated Non-Reduplicative Ideophones",
`WordTypeSRI` = "Split Reduplicative Ideophones")) %>%
`colnames<-`(c("Fixed Effect", "Estimate", "SE", "z", "p")) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_at("p", funs(ifelse(.<0.001, "<0.001", .))) %>%
knitr::kable(caption = "Word Type Comparison- Fixed Effects Table", ) %>%
kable_styling(full_width= F) %>%
pack_rows("Intercept", 1, 1) %>%
pack_rows("Word Types", 2, 6)
alldata.WordType <- summarySE(data=allTesting,
measurevar = "correct",
groupvars = "WordType")
##Word Types Descriptives
alldata.WordType <- summarySE(data=allTesting,
measurevar = "Correct",
groupvars = "WordType")
alldata.WordType.EM <- emmeans(afex1, ~WordType)
#Read in the data
Exp1Data <- read.csv("D:Publications/Motivated vs conventional systematicity/Data/5B Data CSV.csv")
#Read in the data
Exp1Data <- read.csv("D:/Publications/Motivated vs conventional systematicity/Data/5B Data CSV.csv")
#Relabel the Condition Column
Exp1Data$Condition <- factor(Exp1Data$Condition,
levels = c(1,2,3,4),
labels = c("Iconic", "Conventional", "Mixed Systematicity", "Counter-Iconic"))
#Add the BlockMinus Column
Exp1Data$BlockMinus <- Exp1Data$Block - 1
#Add in subconditions for Condition 2- Conventional mappings can go one of two ways and we need to take a look at those right away
Exp1DataSub <- subset(Exp1Data, Condition == "Conventional")
Exp1DataSub$Holder <- paste(Exp1DataSub$Condition, substr(Exp1DataSub$Label, 1,2), sep = "-")
Exp1DataSub$SubCondition1 <- grepl("th",Exp1DataSub$Label)
Exp1DataSub$SubCondition2 <- paste(Exp1DataSub$SubCondition1, Exp1DataSub$LabelType, sep = "-" )
Exp1DataSub$SubCondition3 <- mapvalues(Exp1DataSub$SubCondition2,
from = c("TRUE-C", "FALSE-S", "FALSE-C", "TRUE-S"),
to = c("A", "A", "B", "B"))
#Look at the difference between subconditions-
SubConditions <- summarySE(data=Exp1DataSub,
measurevar = "RespCorr",
groupvars = "SubCondition3")
colnames(SubConditions) <- c("Subcondition", "N", "Mean", "SD", "SE", "CI")
knitr::kable(
SubConditions
%>%  mutate_if(is.numeric, round, digits = 3)
, caption = 'Experiment 1- Subcondition Descriptive Statistics') %>%
kable_styling(full_width = F)
#Very basic statistical comparison
afex.Exp1Sub <- mixed(RespCorr ~ SubCondition3 * Block + (1|ID),
data=Exp1DataSub,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE)
#ANOVA Summary for reporting
afex.Exp1Sub$anova_table %>%
data.frame() %>%
tibble::rownames_to_column(var= "Variable") %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
`colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
knitr::kable(caption = "Experiment 1- Subcondition Comparison", ) %>%
kable_styling(full_width= F)
#Full Table
summary(afex.Exp1Sub)
#Aggregating Data for Visualisation
Exp1SubAgg <- aggregate(RespCorr ~ SubCondition3 + Block + ID , data=Exp1DataSub, mean, na.rm= FALSE)
Exp1SubAgg$Block <- factor(Exp1SubAgg$Block)
#Plotting subconditions for visualisation
ggplot(data=Exp1SubAgg, aes(x=Block, y=RespCorr, group= SubCondition3)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= TRUE, aes(linetype = SubCondition3)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
theme_tufte() +
ggtitle("Comparison of Conventional Subconditions of Experiment 1")
#use summarySE to aggregate data getting mean, standard deviation, standard error, arnd 95% confidence intervals for the data
Exp1Agg2 <- summarySE(Exp1Data, measurevar= "RespCorr", groupvars = c("Condition", "Block"))
Exp1Agg2$Block <- factor(Exp1Agg2$Block)
pd <- position_dodge(width = 0.1)
#Plotting with 95% confidence interval
ggplot(data=Exp1Agg2, aes(x=Block, y=RespCorr, group= Condition)) +
geom_line(aes(color = Condition, linetype= Condition), size = 1.2, position=pd) +
geom_errorbar(aes(ymin= RespCorr - ci, ymax= RespCorr + ci, color= Condition), width= 0.2, size = 1, position=pd) +
geom_point(aes(color = Condition, shape = Condition), size = 3, position=pd) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
theme_alan() +
scale_linetype_manual(values = c("solid", "solid", "longdash", "longdash")) +
scale_color_manual(values= c("#a1dab4", "#41b6c4","#2c7fb8", "#253494")) +
scale_shape_manual(values= c(15,16,17,18)) +
theme(legend.position = c(0.85, 0.22)) +
theme(legend.key=element_blank())
#+
#ggtitle("Comparison of Conditions of Experiment 1")
ggsave("C:/Users/Alan Nielsen/Google Drive/Publications/Motivated vs conventional systematicity/Figures/Exp1Plot1.png",
plot = last_plot(), device = NULL, path = NULL,
width = 8, height = 4.5, units = c("in", "cm", "mm"),
dpi = 600)
#Main Analysis via AFEX
##Changed this analysis to afex - originally done with clunkier model comparison. Yields same results
Exp1Data$Condition <- factor(Exp1Data$Condition,
levels = c("Conventional", "Iconic", "Mixed Systematicity", "Counter-Iconic"))
Exp1Data$Condition <-relevel(Exp1Data$Condition, ref= "Conventional")
afex.Exp1 <- mixed(RespCorr ~ Condition * BlockMinus + (1+BlockMinus|ID),
data=Exp1Data,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE
)
##ANOVA Table for P Values of Main effects and Interactions
afex.Exp1$anova_table %>%
data.frame() %>%
tibble::rownames_to_column(var= "Variable") %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
`colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
knitr::kable(caption = "Experiment 1- Main ANOVA Table", ) %>%
kable_styling(full_width= F)
##Fixed Effects
summary(afex.Exp1)$coefficients  %>%
data.frame() %>%
tibble::rownames_to_column(var= "FixedEffect") %>%
mutate(FixedEffect = recode_factor(FixedEffect,
`Condition1` = "Counter-Iconic",
`Condition2` = "Iconic",
`Condition3` = "Mixed Systematicity",
`Condition1:BlockMinus` = "Counter-Iconic",
`Condition2:BlockMinus` = "Iconic",
`Condition3:BlockMinus` = "Mixed Systematicity")) %>%
`colnames<-`(c("Fixed Effect", "Estimate", "SE", "z", "p")) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_at("p", funs(ifelse(.<0.001, "<0.001", .))) %>%
knitr::kable(caption = "Experiment 1- Fixed Effects Table", ) %>%
kable_styling(full_width= F) %>%
pack_rows("Intercept", 1, 1) %>%
pack_rows("Conditions", 2, 4) %>%
pack_rows("BlockMinus", 5, 5) %>%
pack_rows("Interactions w/ BlockMinus", 6,8)
#Kenny's models
model1 <- glmer(RespCorr ~ Condition * BlockMinus + (1 + BlockMinus | ID),data=Exp1Data,family="binomial")
summary(model1)$coefficients %>%
data.frame() %>%
tibble::rownames_to_column(var= "FixedEffect") %>%
mutate_if(is.numeric, round, digits = 2) %>%
knitr::kable(caption = "Experiment 1- Fixed Effects Table (Kenny)", ) %>%
kable_styling(full_width= F)
##show the non-significant intercept of this model, which shows that Mixed Systematicity is not different from chance at Block 1
Exp1Data$ConditionP <- relevel(Exp1Data$Condition,ref="Mixed Systematicity")
model1p <- glmer(RespCorr ~ ConditionP * BlockMinus + (1 + BlockMinus | ID),data=Exp1Data,family="binomial",control=glmerControl(optimizer="bobyqa"))
summary(model1p)$coefficients %>%
data.frame() %>%
tibble::rownames_to_column(var= "FixedEffect") %>%
mutate_if(is.numeric, round, digits = 2) %>%
knitr::kable(caption = "Experiment 1- Fixed Effects Table (Kenny) - Mixed Baseline", ) %>%
kable_styling(full_width= F)
#Other Analyses
#### The reported Analysis uses BlockMinus, a numeric variable from 0-2 and has no trouble converging
#### Below I use the original Block variable as a factor - this isn't reported but is used for generating descriptive statistics and post-hoc comparisons
Exp1Data$Block <- factor(Exp1Data$Block)
Exp1Data$Block <-relevel(Exp1Data$Block, ref= "1")
afex.Exp1.Block <- mixed(RespCorr ~ Condition * Block + (1+Block|ID),
data=Exp1Data,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE,
)
##ANOVA Table for P Values of Main effects and Interactions
afex.Exp1.Block$anova_table %>%
data.frame() %>%
tibble::rownames_to_column(var= "Variable") %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_all(funs(ifelse(.<0.001, "<0.001", .))) %>%
`colnames<-`(c("Variable", "df", "Chi Sq", "Chi df", "p")) %>%
knitr::kable(caption = "Experiment 1- Main ANOVA Table (Block as Factor)", ) %>%
kable_styling(full_width= F)
##Fixed Effects
summary(afex.Exp1.Block)$coefficients  %>%
data.frame() %>%
tibble::rownames_to_column(var= "FixedEffect") %>%
mutate(FixedEffect = recode_factor(FixedEffect,
`Condition1` = "Counter-Iconic",
`Condition2` = "Iconic",
`Condition3` = "Mixed Systematicity",
`Block1` = "Block 2",
`Block2` = "Block 3",
`Condition1:Block1` = "Counter-Iconic:Block 2",
`Condition1:Block2` = "Counter-Iconic:Block 3",
`Condition2:Block1` = "Iconic:Block 2",
`Condition2:Block2` = "Iconic:Block 3",
`Condition3:Block1` = "Mixed Systematicity:Block 2",
`Condition3:Block2` = "Mixed Systematicity:Block 3"
)) %>%
`colnames<-`(c("Fixed Effect", "Estimate", "SE", "z", "p")) %>%
mutate_if(is.numeric, round, digits = 3) %>%
mutate_at("p", funs(ifelse(.<0.001, "<0.001", .))) %>%
knitr::kable(caption = "Experiment 1- Fixed Effects Table (Block as Factor", ) %>%
kable_styling(full_width= F, bootstrap_options = "condensed") %>%
pack_rows("Intercept", 1, 1) %>%
pack_rows("Conditions", 2, 4) %>%
pack_rows("Blocks", 5, 6) %>%
pack_rows("Interactions w/ Blocks", 7,12)
#BLOCK
##Block Descriptives
Exp1.Block <- summarySE(data=Exp1Data,
measurevar = "RespCorr",
groupvars = "Block")
##Blocks vs. Chance
Exp1.Block.vchance <- test(emmeans(afex.Exp1.Block,
~as.factor(Block),
adjust = "tukey"))
update.packages("")
update.packages("emmeans")
alldata.WordType.EM <- emmeans(afex1, ~WordType)
afex1 <- lmer(Correct ~ WordType + (1|ParticipantID),
data=allTesting,
family=binomial,
control=glmerControl(optimizer="bobyqa"),
method = 'LRT',
progress=FALSE)
alldata.WordType <- summarySE(data=allTesting,
measurevar = "orrect",
groupvars = "WordType")
alldata.WordType <- summarySE(data=allTesting,
measurevar = "Correct",
groupvars = "WordType")
alldata.WordType.EM <- emmeans(afex1, ~WordType)
library(lme4)
library(plyr)
library(ggplot2)
library(afex)
library(emmeans)
library(ggthemes)
library(tidyverse)
library(kableExtra)
library(Hmisc)
library(binom)
library(Rmisc)
library(magick)
library(webshot)
library(magrittr)
library(multcomp)
library(data.table)
alldata.WordType <- summarySE(data=allTesting,
measurevar = "Correct",
groupvars = "WordType")
alldata.WordType.EM <- emmeans(afex1, ~WordType)
